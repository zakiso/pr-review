name: 'PR & Commit Format Validator'
description: 'Validate Pull Request and Commit message formats using rules and LLM analysis'
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  openai-api-key:
    description: 'OpenAI API Key for LLM validation'
    required: true
  commit-regex:
    description: 'Regex pattern to validate commit messages'
    default: '^(feat|fix|docs|style|refactor|test|chore|perf)(\(.+\))?: [A-Z].+'
    required: false
  pr-title-regex:
    description: 'Regex pattern to validate PR titles'
    default: '^\[(Feature|Fix|Docs|Refactor|Test|Chore)\] .+'
    required: false
  main-branch:
    description: 'Name of the main branch to compare commits against'
    default: 'main'
    required: false
  model-name:
    description: 'OpenAI model to use for validation'
    default: 'gpt-4'
    required: false
  skip-llm-check:
    description: 'Skip LLM validation (set to "true" to skip)'
    default: 'false'
    required: false
  skip-code-review:
    description: 'Skip code review (set to "true" to skip)'
    default: 'false'
    required: false
  max-files-to-review:
    description: 'Maximum number of files to review in a PR'
    default: '10'
    required: false
  review-threshold:
    description: 'Minimum score (1-10) required to pass code review'
    default: '6'
    required: false
  github-token:
    description: 'GitHub token with permissions to comment on PRs'
    default: '${{ github.token }}'
    required: false
  ignore-commit-check:
    description: 'Ignore commit format check failures but still show warnings (set to "true" to ignore)'
    default: 'false'
    required: false

# 设置所需的权限
permissions:
  contents: read
  pull-requests: write
  checks: write

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        # 安装必要的依赖，不依赖 requirements.txt
        pip install 'openai>=1.0.0' 'requests>=2.31.0'

    - name: Display debug info
      shell: bash
      run: |
        echo "DEBUG: GitHub context:"
        echo "PR Number: ${{ github.event.pull_request.number }}"
        echo "Repo: ${{ github.repository }}"
        echo "SHA: ${{ github.event.pull_request.head.sha }}"
        echo "Token type: ${{ github.token != '' && 'Available' || 'Missing' }}"
        echo "Custom token type: ${{ inputs.github-token != '' && 'Available' || 'Missing' }}"

    # 提交格式检查
    - name: Check commit messages
      id: check_commits
      shell: bash
      run: |
        bash ${{ github.action_path }}/scripts/check_commits.sh
        # 在这里直接进行提交检查结果的报告
        python ${{ github.action_path }}/scripts/report_check.py \
          --title "${commit_check_title:-提交检查}" \
          --summary "${commit_check_summary:-验证了提交信息格式。}" \
          --text "${commit_check_text:-没有详细的检查信息。}" \
          --conclusion "${commit_check_conclusion:-neutral}"
      env:
        COMMIT_REGEX: ${{ inputs.commit-regex }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_FULL_NAME: ${{ github.repository }}
        IGNORE_COMMIT_CHECK: ${{ inputs.ignore-commit-check }}
        GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
        CHECK_NAME: 'Commit Format Check'

    # PR格式检查
    - name: Check PR format
      id: check_pr
      shell: bash
      run: |
        python ${{ github.action_path }}/scripts/check_pr.py "${{ github.event.pull_request.title }}" "${{ github.event.pull_request.body || '' }}"
        # 在这里直接进行PR检查结果的报告
        python ${{ github.action_path }}/scripts/report_check.py \
          --title "${pr_check_title:-PR格式检查}" \
          --summary "${pr_check_summary:-验证了PR的格式。}" \
          --text "${pr_check_text:-没有详细的检查信息。}" \
          --conclusion "${pr_check_conclusion:-neutral}"
      env:
        PR_TITLE_REGEX: ${{ inputs.pr-title-regex }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_FULL_NAME: ${{ github.repository }}
        GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
        CHECK_NAME: 'PR Format Check'

    # LLM质量评估
    - name: LLM validation
      if: inputs.skip-llm-check != 'true'
      id: llm_check
      shell: bash
      run: |
        python ${{ github.action_path }}/scripts/llm_check.py "${{ github.event.pull_request.title }}" "${{ github.event.pull_request.body || '' }}"
        # 在这里直接进行LLM检查结果的报告
        python ${{ github.action_path }}/scripts/report_check.py \
          --title "${llm_check_title:-PR质量评估}" \
          --summary "${llm_check_summary:-评估了PR的质量。}" \
          --text "${llm_check_text:-没有详细的评估信息。}" \
          --conclusion "${llm_check_conclusion:-neutral}"
      env:
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        MODEL_NAME: ${{ inputs.model-name }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_FULL_NAME: ${{ github.repository }}
        GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
        CHECK_NAME: 'PR Quality Check'

    # 代码审查
    - name: Code Review
      if: inputs.skip-code-review != 'true'
      id: code_review
      shell: bash
      run: |
        python ${{ github.action_path }}/scripts/code_review.py
        # 在这里直接进行代码审查结果的报告
        python ${{ github.action_path }}/scripts/report_check.py \
          --title "${code_review_title:-代码审查}" \
          --summary "${code_review_summary:-审查了代码变更。}" \
          --text "${code_review_text:-没有详细的审查信息。}" \
          --conclusion "${code_review_conclusion:-neutral}"
      env:
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        MODEL_NAME: ${{ inputs.model-name }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_FULL_NAME: ${{ github.repository }}
        MAX_FILES_TO_REVIEW: ${{ inputs.max-files-to-review }}
        REVIEW_THRESHOLD: ${{ inputs.review-threshold }}
        GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
        CHECK_NAME: 'Code Review'